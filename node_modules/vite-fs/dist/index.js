"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }// src/index.ts
var _path2 = require('path');
var _fs = require('fs');
var _debug2 = require('debug'); var _debug3 = _interopRequireDefault(_debug2);
var _lrucache = require('lru-cache'); var _lrucache2 = _interopRequireDefault(_lrucache);
var _bodyparser = require('body-parser'); var _bodyparser2 = _interopRequireDefault(_bodyparser);

// src/constants.ts
var SUFFIX = ".ref";
var PREFIX = "vite-fs:";

// src/gen.ts
function generateDev(path, content = "", isJSON = false, throttle = 1e3) {
  return `
import { ref } from 'vue'
import { ignorableWatch, useThrottleFn } from '@vueuse/core'

const PATH = ${JSON.stringify(path)}
const content = ref(${isJSON ? content : JSON.stringify(content)})

let controller = null

async function send() {
  if (controller)
    controller.abort()
  controller = new AbortController()

  try {
    await fetch('/@vite-fs/upload', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        path: PATH,
        content: content.value,
      }),
      signal: controller.signal,
    })
  }
  catch (e) {}
}

const { ignoreUpdates } = ignorableWatch(content, useThrottleFn(send, ${throttle}), { deep: true })

if (import.meta.hot) {
  import.meta.hot.on('vite-fs-update', (data) => {
    if (data.path === PATH) {
      ignoreUpdates(() => {
        content.value = data.content
      })
    }
  })
}

export default content
`;
}
function generateBuild(content = "", isJSON = true) {
  return `import { ref } from 'vue'
export default ref(${isJSON ? content : JSON.stringify(content)})`;
}

// src/index.ts
var debug = _debug3.default.call(void 0, "vite-fs:resolve");
function ViteFS() {
  let config;
  let server;
  const watched = [];
  const fileCache = new (0, _lrucache2.default)(50);
  const skipped = new Set();
  const readFile = async (path) => {
    if (fileCache.has(path))
      return fileCache.get(path);
    const content = await _fs.promises.readFile(path, "utf-8");
    fileCache.set(path, content);
    return content;
  };
  return {
    name: "vite-fs",
    enforce: "pre",
    configResolved(_config) {
      config = _config;
    },
    configureServer(_server) {
      server = _server;
      server.middlewares.use(_bodyparser2.default.json());
      server.middlewares.use("/@vite-fs/upload", (req, res, next) => {
        if (req.method !== "POST")
          return next();
        const {path, content} = req.body;
        debug("upload:", path);
        skipped.add(path);
        const isJSON = path.endsWith(".json");
        _fs.promises.writeFile(path, isJSON ? JSON.stringify(content, null, 2) : content, "utf-8");
        res.statusCode = 200;
        res.end();
      });
    },
    resolveId(id, importer) {
      if (id.startsWith(PREFIX) || !id.endsWith(SUFFIX) || !importer)
        return null;
      return PREFIX + _path2.resolve.call(void 0, _path2.dirname.call(void 0, importer), id);
    },
    async load(id) {
      if (!id.startsWith(PREFIX) || !id.endsWith(SUFFIX))
        return null;
      const path = id.slice(PREFIX.length, -SUFFIX.length);
      const isJSON = path.endsWith(".json");
      debug(path);
      if (config.command === "build") {
        return {
          code: generateBuild(await readFile(path), isJSON),
          map: ""
        };
      }
      if (server && !watched.includes(path)) {
        watched.push(path);
        server.watcher.add(path);
        server.watcher.on("change", async (_path) => {
          if (_path !== path)
            return;
          if (skipped.has(path)) {
            skipped.delete(path);
            return;
          }
          debug(`changed: ${path}`);
          fileCache.del(path);
          const content = await readFile(path);
          server.ws.send({
            type: "custom",
            event: "vite-fs-update",
            data: {
              path,
              content: isJSON ? JSON.parse(content) : content
            }
          });
        });
      }
      return {
        code: generateDev(path, await readFile(path), isJSON),
        map: ""
      };
    }
  };
}
var src_default = ViteFS;



exports.ViteFS = ViteFS; exports.default = src_default;
