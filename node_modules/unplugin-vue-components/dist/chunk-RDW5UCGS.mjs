import {
  DISABLE_COMMENT,
  LibraryResolver,
  getNameFromFilePath,
  matchGlobs,
  parseId,
  pascalCase,
  resolveAlias,
  shouldTransform,
  stringifyComponentImport
} from "./chunk-VAQPFZLT.mjs";
import {
  __require,
  __spreadProps,
  __spreadValues,
  __toModule
} from "./chunk-PJJOEYQ7.mjs";

// src/core/unplugin.ts
import { createUnplugin } from "unplugin";
import { createFilter } from "@rollup/pluginutils";
import chokidar from "chokidar";

// src/core/context.ts
import { relative as relative2 } from "path";
import Debug5 from "debug";
import { throttle, toArray as toArray2, slash as slash3 } from "@antfu/utils";

// src/core/options.ts
import { join, resolve } from "path";
import { slash, toArray } from "@antfu/utils";
import { isPackageExists } from "local-pkg";
var defaultOptions = {
  dirs: "src/components",
  extensions: "vue",
  deep: true,
  dts: isPackageExists("typescript"),
  directoryAsNamespace: false,
  globalNamespaces: [],
  libraries: [],
  resolvers: [],
  importPathTransform: (v) => v,
  allowOverrides: false
};
function resolveOptions(options, root) {
  const resolved = Object.assign({}, defaultOptions, options);
  resolved.libraries = toArray(resolved.libraries).map((i) => typeof i === "string" ? { name: i } : i);
  resolved.resolvers = toArray(resolved.resolvers);
  resolved.resolvers.push(...resolved.libraries.map((lib) => LibraryResolver(lib)));
  resolved.extensions = toArray(resolved.extensions);
  if (resolved.globs) {
    resolved.globs = toArray(resolved.globs).map((glob) => slash(resolve(root, glob)));
  } else {
    const extsGlob = resolved.extensions.length === 1 ? resolved.extensions : `{${resolved.extensions.join(",")}}`;
    resolved.dirs = toArray(resolved.dirs);
    resolved.resolvedDirs = resolved.dirs.map((i) => slash(resolve(root, i)));
    resolved.globs = resolved.resolvedDirs.map((i) => resolved.deep ? slash(join(i, `**/*.${extsGlob}`)) : slash(join(i, `*.${extsGlob}`)));
    if (!resolved.extensions.length)
      throw new Error("[unplugin-vue-components] `extensions` option is required to search for components");
  }
  resolved.dts = !options.dts ? false : resolve(root, typeof options.dts === "string" ? options.dts : "components.d.ts");
  resolved.root = root;
  resolved.transformer = options.transformer || getVueVersion() || "vue3";
  resolved.directives = typeof options.directives === "boolean" ? options.directives : getVueVersion() === "vue3";
  return resolved;
}
function getVueVersion() {
  var _a;
  try {
    const vue = __require("vue");
    const version = ((_a = vue == null ? void 0 : vue.default) == null ? void 0 : _a.version) || (vue == null ? void 0 : vue.version) || "3";
    return version.startsWith("2.") ? "vue2" : "vue3";
  } catch {
    return null;
  }
}

// src/core/fs/glob.ts
import fg from "fast-glob";
import Debug from "debug";
var debug = Debug("unplugin-vue-components:glob");
function searchComponents(ctx) {
  var _a;
  debug(`started with: [${ctx.options.globs.join(", ")}]`);
  const root = ctx.root;
  const files = fg.sync(ctx.options.globs, {
    ignore: ["node_modules"],
    onlyFiles: true,
    cwd: root,
    absolute: true
  });
  if (!files.length && !((_a = ctx.options.resolvers) == null ? void 0 : _a.length))
    console.warn("[unplugin-vue-components] no components found");
  debug(`${files.length} components found.`);
  ctx.addComponents(files);
}

// src/core/declaration.ts
import { dirname, relative, isAbsolute } from "path";
import { promises as fs, existsSync } from "fs";
import { notNullish, slash as slash2 } from "@antfu/utils";
function parseDeclaration(code) {
  if (!code)
    return {};
  return Object.fromEntries(Array.from(code.matchAll(/(?<!\/\/)\s+\s+['"]?(.+?)['"]?:\s(.+?)\n/g)).map((i) => [i[1], i[2]]));
}
async function generateDeclaration(ctx, root, filepath) {
  const imports = Object.fromEntries(Object.values(__spreadValues(__spreadValues({}, ctx.componentNameMap), ctx.componentCustomMap)).map(({ path, name, importName }) => {
    if (!name)
      return void 0;
    const related = isAbsolute(path) ? `./${relative(dirname(filepath), path)}` : path;
    let entry = `typeof import('${slash2(related)}')`;
    if (importName)
      entry += `['${importName}']`;
    else
      entry += "['default']";
    return [name, entry];
  }).filter(notNullish));
  if (!Object.keys(imports).length)
    return;
  const originalContent = existsSync(filepath) ? await fs.readFile(filepath, "utf-8") : "";
  const originalImports = parseDeclaration(originalContent);
  const lines = Object.entries(__spreadValues(__spreadValues({}, originalImports), imports)).sort((a, b) => a[0].localeCompare(b[0])).map(([name, v]) => {
    if (!/^\w+$/.test(name))
      name = `'${name}'`;
    return `${name}: ${v}`;
  });
  const code = `// generated by unplugin-vue-components
// We suggest you to commit this file into source control
// Read more: https://github.com/vuejs/vue-next/pull/3399

declare module 'vue' {
  export interface GlobalComponents {
    ${lines.join("\n    ")}
  }
}

export { }
`;
  if (code !== originalContent)
    await fs.writeFile(filepath, code, "utf-8");
}

// src/core/transformer.ts
import Debug4 from "debug";
import MagicString from "magic-string";

// src/core/transforms/component.ts
import Debug2 from "debug";
var debug2 = Debug2("unplugin-vue-components:transform:component");
var resolveVue2 = (code, s) => {
  const results = [];
  for (const match of code.matchAll(/_c\([\s\n\t]*['"](.+?)["']([,)])/g)) {
    const [full, matchedName, append] = match;
    if (match.index != null && matchedName && !matchedName.startsWith("_")) {
      const start = match.index;
      const end = start + full.length;
      results.push({
        rawName: matchedName,
        replace: (resolved) => s.overwrite(start, end, `_c(${resolved}${append}`)
      });
    }
  }
  return results;
};
var resolveVue3 = (code, s) => {
  const results = [];
  for (const match of code.matchAll(/_resolveComponent\("(.+?)"\)/g)) {
    const matchedName = match[1];
    if (match.index != null && matchedName && !matchedName.startsWith("_")) {
      const start = match.index;
      const end = start + match[0].length;
      results.push({
        rawName: matchedName,
        replace: (resolved) => s.overwrite(start, end, resolved)
      });
    }
  }
  return results;
};
var component_default = async (code, transformer, s, ctx, sfcPath) => {
  let no = 0;
  const results = transformer === "vue2" ? resolveVue2(code, s) : resolveVue3(code, s);
  for (const { rawName, replace } of results) {
    debug2(`| ${rawName}`);
    const name = pascalCase(rawName);
    ctx.updateUsageMap(sfcPath, [name]);
    const component = await ctx.findComponent(name, "component", [sfcPath]);
    if (component) {
      const varName = `__unplugin_components_${no}`;
      s.prepend(`${stringifyComponentImport(__spreadProps(__spreadValues({}, component), { name: varName }), ctx)};
`);
      no += 1;
      replace(varName);
    }
  }
  debug2(`^ (${no})`);
};

// src/core/transforms/directive/index.ts
import Debug3 from "debug";
var debug3 = Debug3("unplugin-vue-components:transform:directive");
var directive_default = async (code, transformer, s, ctx, sfcPath) => {
  let no = 0;
  const { resolve: resolve3 } = await (transformer === "vue2" ? Promise.resolve().then(() => __toModule(__require("./vue2-6CUOXSRO.mjs"))) : Promise.resolve().then(() => __toModule(__require("./vue3-G4UGETVC.mjs"))));
  const results = resolve3(code, s);
  for (const { rawName, replace } of results) {
    debug3(`| ${rawName}`);
    const name = pascalCase(rawName);
    ctx.updateUsageMap(sfcPath, [name]);
    const directive = await ctx.findComponent(name, "directive", [sfcPath]);
    if (!directive)
      continue;
    const varName = `__unplugin_directives_${no}`;
    s.prepend(`${stringifyComponentImport(__spreadProps(__spreadValues({}, directive), { name: varName }), ctx)};
`);
    no += 1;
    replace(varName);
  }
  debug3(`^ (${no})`);
};

// src/core/transformer.ts
var debug4 = Debug4("unplugin-vue-components:transformer");
var transformer_default = (ctx, transformer) => {
  return async (code, id, path) => {
    ctx.searchGlob();
    const sfcPath = ctx.normalizePath(path);
    debug4(sfcPath);
    const s = new MagicString(code);
    await component_default(code, transformer, s, ctx, sfcPath);
    if (ctx.options.directives)
      await directive_default(code, transformer, s, ctx, sfcPath);
    s.prepend(DISABLE_COMMENT);
    const result = { code: s.toString() };
    if (ctx.sourcemap)
      result.map = s.generateMap({ source: id, includeContent: true });
    return result;
  };
};

// src/core/context.ts
var debug5 = {
  components: Debug5("unplugin-vue-components:context:components"),
  search: Debug5("unplugin-vue-components:context:search"),
  hmr: Debug5("unplugin-vue-components:context:hmr"),
  decleration: Debug5("unplugin-vue-components:decleration"),
  env: Debug5("unplugin-vue-components:env")
};
var Context = class {
  constructor(rawOptions) {
    this.rawOptions = rawOptions;
    this.transformer = void 0;
    this._componentPaths = new Set();
    this._componentNameMap = {};
    this._componentUsageMap = {};
    this._componentCustomMap = {};
    this.root = process.cwd();
    this.sourcemap = true;
    this.alias = {};
    this._searched = false;
    this.options = resolveOptions(rawOptions, this.root);
    this.generateDeclaration = throttle(500, false, this.generateDeclaration.bind(this));
    this.setTransformer(this.options.transformer);
  }
  setRoot(root) {
    if (this.root === root)
      return;
    debug5.env("root", root);
    this.root = root;
    this.options = resolveOptions(this.rawOptions, this.root);
  }
  setTransformer(name) {
    debug5.env("transformer", name);
    this.transformer = transformer_default(this, name || "vue3");
  }
  transform(code, id) {
    const { path, query } = parseId(id);
    return this.transformer(code, id, path, query);
  }
  setupViteServer(server) {
    if (this._server === server)
      return;
    this._server = server;
    this.setupWatcher(server.watcher);
  }
  setupWatcher(watcher) {
    const { globs } = this.options;
    watcher.on("unlink", (path) => {
      if (!matchGlobs(path, globs))
        return;
      this.removeComponents(path);
      this.onUpdate(path);
    });
    watcher.on("add", (path) => {
      if (!matchGlobs(path, globs))
        return;
      this.addComponents(path);
      this.onUpdate(path);
    });
  }
  updateUsageMap(path, paths) {
    if (!this._componentUsageMap[path])
      this._componentUsageMap[path] = new Set();
    paths.forEach((p) => {
      this._componentUsageMap[path].add(p);
    });
  }
  addComponents(paths) {
    debug5.components("add", paths);
    const size = this._componentPaths.size;
    toArray2(paths).forEach((p) => this._componentPaths.add(p));
    if (this._componentPaths.size !== size) {
      this.updateComponentNameMap();
      return true;
    }
    return false;
  }
  addCustomComponents(info) {
    if (info.name)
      this._componentCustomMap[info.name] = info;
  }
  removeComponents(paths) {
    debug5.components("remove", paths);
    const size = this._componentPaths.size;
    toArray2(paths).forEach((p) => this._componentPaths.delete(p));
    if (this._componentPaths.size !== size) {
      this.updateComponentNameMap();
      return true;
    }
    return false;
  }
  onUpdate(path) {
    this.generateDeclaration();
    if (!this._server)
      return;
    const payload = {
      type: "update",
      updates: []
    };
    const timestamp = +new Date();
    const name = pascalCase(getNameFromFilePath(path, this.options));
    Object.entries(this._componentUsageMap).forEach(([key, values]) => {
      if (values.has(name)) {
        const r = `/${slash3(relative2(this.root, key))}`;
        payload.updates.push({
          acceptedPath: r,
          path: r,
          timestamp,
          type: "js-update"
        });
      }
    });
    if (payload.updates.length)
      this._server.ws.send(payload);
  }
  updateComponentNameMap() {
    this._componentNameMap = {};
    Array.from(this._componentPaths).forEach((path) => {
      const name = pascalCase(getNameFromFilePath(path, this.options));
      if (this._componentNameMap[name] && !this.options.allowOverrides) {
        console.warn(`[unplugin-vue-components] component "${name}"(${path}) has naming conflicts with other components, ignored.`);
        return;
      }
      this._componentNameMap[name] = {
        name,
        path
      };
    });
  }
  async findComponent(name, type, excludePaths = []) {
    let info = this._componentNameMap[name];
    if (info && !excludePaths.includes(info.path) && !excludePaths.includes(info.path.slice(1)))
      return info;
    for (const resolver of this.options.resolvers) {
      const result = await resolver(name, type);
      if (result) {
        if (typeof result === "string") {
          info = {
            name,
            path: result
          };
          this.addCustomComponents(info);
          return info;
        } else {
          info = __spreadValues({
            name
          }, result);
          this.addCustomComponents(info);
          return info;
        }
      }
    }
    return void 0;
  }
  normalizePath(path) {
    var _a, _b, _c;
    return resolveAlias(path, ((_b = (_a = this.viteConfig) == null ? void 0 : _a.resolve) == null ? void 0 : _b.alias) || ((_c = this.viteConfig) == null ? void 0 : _c.alias) || []);
  }
  relative(path) {
    if (path.startsWith("/") && !path.startsWith(this.root))
      return slash3(path.slice(1));
    return slash3(relative2(this.root, path));
  }
  searchGlob() {
    if (this._searched)
      return;
    searchComponents(this);
    debug5.search(this._componentNameMap);
    this._searched = true;
  }
  generateDeclaration() {
    if (!this.options.dts)
      return;
    debug5.decleration("generating");
    generateDeclaration(this, this.options.root, this.options.dts);
  }
  get componentNameMap() {
    return this._componentNameMap;
  }
  get componentCustomMap() {
    return this._componentCustomMap;
  }
};

// src/core/unplugin.ts
var unplugin_default = createUnplugin((options = {}) => {
  const filter = createFilter(options.include || [/\.vue$/, /\.vue\?vue/], options.exclude || [/node_modules/, /\.git/, /\.nuxt/]);
  const ctx = new Context(options);
  return {
    name: "unplugin-vue-components",
    enforce: "post",
    transformInclude(id) {
      return filter(id);
    },
    async transform(code, id) {
      if (!shouldTransform(code))
        return null;
      try {
        const result = await ctx.transform(code, id);
        ctx.generateDeclaration();
        return result;
      } catch (e) {
        this.error(e);
      }
    },
    vite: {
      configResolved(config) {
        ctx.setRoot(config.root);
        ctx.sourcemap = config.build.sourcemap;
        if (config.plugins.find((i) => i.name === "vite-plugin-vue2"))
          ctx.setTransformer("vue2");
        if (options.dts) {
          ctx.searchGlob();
          ctx.generateDeclaration();
        }
        if (config.build.watch && config.command === "build")
          ctx.setupWatcher(chokidar.watch(ctx.options.globs));
      },
      configureServer(server) {
        ctx.setupViteServer(server);
      }
    }
  };
});

export {
  unplugin_default
};
